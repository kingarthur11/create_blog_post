var defered = Q.defer();
const offset = queryString.offset * queryString.limit;
const limit = queryString.limit;
var queryWhere = { class_id: { $ne: null }, section_id: { $ne: null } };
var searchClass = {};
var searchSection = {};
if (queryString) {
    if (queryString.class && queryString.class !== "") {
       searchClass = { class_id: { $eq: queryString.class } };
    } else if (queryString.class && queryString.class === "") {
       searchClass = { class_id: { $ne: null } };
    }

if (queryString.section && queryString.section !== "") {
      searchSection = { section_id: { $eq: queryString.section } };
} else if (queryString.section && queryString.section === "") {
      searchSection = { section_id: { $ne: null } };
}
}

queryWhere = {
    $and: [[searchClass], [searchSection]]
};
const schoolDB = require("../../db/models/tenant")(schema);
const Student = schoolDB.model("Student");
Student.findAll({
   attributes: [
  "id",
  "first_name",
  "last_name",
  "profile_image_url",
  "roll_number",
  "emergency_contact_number"
],
offset: offset,
limit: limit,
where: queryWhere,
order: [["roll_number", "ASC"]]
})
.then(result => {
  defered.resolve(result);
})
.catch(err => {
  defered.reject(err);
});
Recommended using Sequelize's own operators


let payload = {username: username}; 
        let accessToken = jwt.sign(payload, ACCESS_TOKEN_SECRET, {algorithm: "HS256", expireIn: ACCESS_TOKEN_LIFE})
        let refreshToken = jwt.sign(payload, REFRESH_TOKEN_SECRET, {algorithm: "HS256", expiresIn: REFRESH_TOKEN_LIFE})
        users[username].refreshToken = refreshToken;
        res.cookie("jwt", accessToken, {secret: true, httpOnly: true})
        res.send();



const verifyToken = (req, res, next) => {
    let verifyMe = req.cookies.jwt;
    if (!verifyMe) {
        return res.status(403).send();
    }
    jwt.verify(verifyMe, ACCESS_TOKEN_SECRET)
};

const refreshToken = (req, res, next) => {
    let verifyMe = req.cookies.jwt;
    if (!verifyMe) {
        return res.status(403).send();
    }
    payload = jwt.verify(verifyMe, ACCESS_TOKEN_SECRET);
    let refreshToken = use[payload.username].refreshToken;
    jwt.verify(refreshToken, REFRESH_TOKEN_SECRET);
    let newToken = jwt.sign(payload, process.ACCESS_TOKEN_SECRET, {expireIn: ACCESS_TOKEN_LIFE});
    res.cookie("jwt", newToken, {secure: true, httpOnly: true});
    res.send();

};

exports.getAll = async (req, res, next) => {
    try {
         const {limit, offset} = req.query;

   const user = await  User.findAll({limit, offset, include: [blog], });   
    return res.json(user)
    (next);
    } catch (error) {
        
    }   

        const blog = require('../model/blog');
const jwt = require('jsonwebtoken');


exports.deleteAll = (req, res, next) => {
    try {
          const user = User.destroy();
    return res.json(user)
        (next);
    } catch (error) {
        
    }  
};

exports.deleteOne = (req, res, next) => {
    try {
         const id = req.params;

    const user = User.destroy(id);
    return res.json(user)
        (next);
    } catch (error) {
        
    }   
};

exports.update = (req, res, next) => {
    try {
        const id = req.params;
     const {firstName, lastName, email, password} = req.body;
   
       const user = User.update({
            firstName,
            lastName,
            email,
            password
        },
        {
             where: {
               id
            }
        } ); 

    return res.json(user)
        (next);
    } catch (error) {
        
    }    
};

http://zetcode.com/javascript/sequelize/